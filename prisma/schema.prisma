// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  orders     Order[]  // Relation avec les commandes
  devis      Devis[]  // Relation avec les devis

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}


// Énumération pour les champs `state` et `status`
enum DevisState {
  EN_ATTENTE_DEVIS
  VALIDE
  REFUSE
}

enum OrderStatus {
  EN_COURS
  TERMINE
  ANNULE
}

model Order {
  id          String          @id @default(cuid())
  userId      String
  clientName  String?
  orderNumber String?
  status      OrderStatus @default(EN_COURS)
  date        String?
  hour        String?
  amount      Float?
  finished    Boolean        @default(false)
  details     OrderDetail[]  // Relation avec les détails des commandes
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("orders")
}

model OrderDetail {
  id        String @id @default(cuid())
  productId Int?
  file      String?
  name      String?
  price     Float?
  image     String?
  quantity  Int?
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_details")
}

model Article {
  id            String         @id @default(cuid())
  file          String?
  image         String?
  name          String?
  price         Float?
  section       String?
  maxDimensions MaxDimensions? // Relation 1:1 avec MaxDimensions

  @@map("articles")
}

model MaxDimensions {
  id        String   @id @default(cuid())
  x         Float
  y         Float
  z         Float
  articleId String   @unique // Un article ne peut avoir qu'un seul MaxDimensions
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("max_dimensions")
}


model Devis {
  id          String     @id @default(cuid())
  userId      String
  file        String
  clientName  String
  date        DateTime   @default(now())
  state       DevisState @default(EN_ATTENTE_DEVIS)
  description String?
  amount      Float?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("devis")
}